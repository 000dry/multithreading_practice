{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red0\green0\blue192;\red100\green100\blue100;
\red42\green0\blue255;\red106\green62\blue62;\red63\green127\blue95;\red127\green159\blue191;}
{\*\expandedcolortbl;;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c0\c0\c75294;\csgenericrgb\c39216\c39216\c39216;
\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c49804\c62353\c74902;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Thread Synchronisation\
\

\b0 Two kinds of problems with multiple threads sharing the same data:\
\
1. Data caching\
2. Interleaving\
\

\b Terminating threads\
\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs22 \cf2 class\cf0  Processor \cf2 extends\cf0  Thread \{\
	\
	\cf2 private volatile\cf0  \cf2 boolean\cf0  \cf3 running\cf0  = \cf2 true\cf0 ;\
	\
	\cf4 @Override\cf0 \
	\cf2 public\cf0  \cf2 void\cf0  run() \{\
		\
		\cf2 while\cf0 (\cf3 running\cf0 ) \{\
			System.\cf3 out\cf0 .println(\cf5 "Hello"\cf0 );\
			\
			\cf2 try\cf0  \{\
				Thread.sleep(100);\
			\} \cf2 catch\cf0  (InterruptedException \cf6 e\cf0 ) \{\
				\cf7 // \cf8 TODO\cf7  Auto-generated catch block\cf0 \
				\cf6 e\cf0 .printStackTrace();\
			\}\
		\}\
	\}\
	\cf2 public\cf0  \cf2 void\cf0  shutdown() \{\
		\cf3 running\cf0  = \cf2 false\cf0 ;\
	\}\
\}\
\
\cf2 public\cf0  \cf2 class\cf0  App \{\
\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf6 args\cf0 ) \{\
		Processor \cf6 proc1\cf0  = \cf2 new\cf0  Processor();\
		\cf6 proc1\cf0 .start();\
		\
		System.\cf3 out\cf0 .println(\cf5 "Press return to stop..."\cf0 );\
		Scanner \cf6 \ul \ulc6 scanner\cf0 \ulnone  = \cf2 new\cf0  Scanner(System.\cf3 in\cf0 );\
		\cf6 scanner\cf0 .nextLine();\
		\
		\cf6 proc1\cf0 .shutdown();\
	\}\
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Above code ^\
\

\b0 Processor class when started runs hello while true \'97 potentially infinite loop.\
Here we give a shutdown() method to switch running to false when called.\
\
The App runs, instantiates a Processor and .start()\'92s it. A Scanner is instantiated and uses .nextLine() to wait for the user to hit enter, at which point it is able to hit proc1.shutdown();\
\
Apparently some JVM environments may cache the running variable at the start and will never see the change in the boolean, meaning the loop doesn\'92t get broken.\
\
This is due to App, and proc1.start() running in separate threads. proc1 is reading the boolean running variable in its own thread, and App is writing to that variable in a different thread. When running for optimisation, Java threads may not expect other threads to modify its data, meaning the access/view of the running variable each thread has would be unique to itself.\
\

\b Volatile keyword\
\

\b0 To prevent some systems falling into an infinite loop, we have the \'91volatile\'92 keyword.\
\
Simply place it after the access modifier and before the return type.\
\
It has no discernible effect on the programme, other than meaning it\'92s guaranteed to run on all implementations of Java.\
\
\
}